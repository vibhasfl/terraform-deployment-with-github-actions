name: Terraform destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run aganist"
        type: choice
        options:
          - development
          - production
        default: development
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: ap-south-1
  WORKING_DIRECTORY: environments/dev

jobs:
  TerraformPlan:
    runs-on: ubuntu-latest
    environment: development
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Print directory and List files
        run: |
          pwd
          ls -lhrta

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }} #change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan --destroy -detailed-exitcode -no-color -out tfplan 
          export exitcode=$?

          printf '%s\n' "$exitcode" # This will output 'exitcode'

          echo "exitcode=$exitcode" >> $GITHUB_ENV

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Print ExitCode
        run: |
          echo "Output from job1: ${{ steps.tf-plan.outputs.exitcode }}"
          printf '%s\n' "$exitcode" # This will output 'exitcode'

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  TerraformDestroy:
    runs-on: ubuntu-latest
    environment: development
    needs: [TerraformPlan]
    if: github.ref == 'refs/heads/dev' && needs.TerraformPlan.outputs.tfplanExitCode == 2
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }} #change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf

      - name: Terraform Apply
        run: terraform apply --destroy -auto-approve
